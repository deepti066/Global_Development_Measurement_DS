# -*- coding: utf-8 -*-
"""trail4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rWY4kQj5Yd7Ps_ReJzDe3bSHSIVrV0QS
"""

#!pip install streamlit



import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN
from sklearn.metrics import silhouette_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Set the title of the Streamlit app
st.title("World Development Measurement Clustering App")

# File uploader
uploaded_file = st.file_uploader("Choose an Excel file", type="xlsx")

if uploaded_file is not None:
    # Load the dataset
    data = pd.read_excel(uploaded_file)

    # Display the first few rows of the dataset
    st.write("Dataset preview:")
    st.dataframe(data.head())

    # Encode categorical columns
    le = LabelEncoder()
    for column in data.select_dtypes(include='object'):
        data[column] = le.fit_transform(data[column])

    # Handle missing values
    imputer = SimpleImputer(strategy='mean')
    data_imputed = pd.DataFrame(imputer.fit_transform(data.select_dtypes(include=['float64', 'int64'])), columns=data.select_dtypes(include=['float64', 'int64']).columns)

    # Detect and remove outliers
    def detect_outliers(df, features):
        outlier_indices = []
        for feature in features:
            IQR = df[feature].quantile(0.75) - df[feature].quantile(0.25)
            lower_bound = df[feature].quantile(0.25) - 1.5 * IQR
            upper_bound = df[feature].quantile(0.75) + 1.5 * IQR
            outlier_indices.extend(df[~((df[feature] >= lower_bound) & (df[feature] <= upper_bound))].index.tolist())
        return list(set(outlier_indices))  # Use set to remove duplicates

    outlier_indices = detect_outliers(data_imputed, data_imputed.columns)
    data_cleaned = data_imputed.drop(outlier_indices).reset_index(drop=True)

    # Normalize the data
    scaler = StandardScaler()
    data_normalized = pd.DataFrame(scaler.fit_transform(data_cleaned), columns=data_cleaned.columns)

    # KMeans Clustering
    sse = []
    for k in range(1, 11):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(data_normalized)
        sse.append(kmeans.inertia_)

    # Plotting the elbow curve
    st.write("Elbow Method for Optimal k")
    plt.figure(figsize=(10, 6))
    plt.plot(range(1, 11), sse, marker='o')
    plt.xlabel('Number of Clusters')
    plt.ylabel('SSE')
    plt.title('Elbow Method for Optimal k')
    st.pyplot(plt)

    # Allow user to select k value
    optimal_k = st.slider('Select number of clusters for KMeans', min_value=2, max_value=10, value=2)
    kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
    data_normalized['Cluster'] = kmeans.fit_predict(data_normalized)

    non_numeric_data = data.select_dtypes(exclude=['float64', 'int64'])
    data_final = pd.concat([data_normalized, non_numeric_data.reset_index(drop=True)], axis=1)

      # Ensure data_final and data_normalized have the same number of rows
    data_final = data_final.dropna(subset=['Cluster'])

    # Visualizing the clusters
    st.write("KMeans Clusters")
    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=data_final, x='GDP', y='Life Expectancy Female', hue='Cluster', palette='viridis')
    plt.title('Clusters of Countries')
    plt.xlabel('GDP')
    plt.ylabel('Life Expectancy (Female)')
    st.pyplot(plt)

    # Agglomerative Clustering
    agg = AgglomerativeClustering(n_clusters=optimal_k)
    numeric_data = data_final.select_dtypes(['float64', 'int64']).fillna(0)
    data_final['Agglomerative_Cluster'] = agg.fit_predict(numeric_data)

    st.write("Agglomerative Clusters")
    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=data_final, x='GDP', y='Life Expectancy Female', hue='Agglomerative_Cluster', palette='viridis')
    plt.title('Agglomerative Clusters')
    plt.xlabel('GDP')
    plt.ylabel('Life Expectancy (Female)')
    st.pyplot(plt)

    # DBSCAN
    dbscan = DBSCAN(eps=0.5, min_samples=5)
    data_final['DBSCAN_Cluster'] = dbscan.fit_predict(numeric_data)

    st.write("DBSCAN Clusters")
    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=data_final, x='GDP', y='Life Expectancy Female', hue='DBSCAN_Cluster', palette='viridis')
    plt.title('DBSCAN Clusters')
    plt.xlabel('GDP')
    plt.ylabel('Life Expectancy (Female)')
    st.pyplot(plt)

 # Silhouette Scores
    # Ensure there are no NaN values in the cluster labels
    if not data_final['Cluster'].isna().any():
        kmeans_silhouette = silhouette_score(data_normalized, data_final['Cluster'])
        st.write(f'K-Means Silhouette Score: {kmeans_silhouette}')
    
    if not data_final['Agglomerative_Cluster'].isna().any():
        agg_silhouette = silhouette_score(data_normalized, data_final['Agglomerative_Cluster'])
        st.write(f'Agglomerative Clustering Silhouette Score: {agg_silhouette}')
    
    if not data_final['DBSCAN_Cluster'].isna().any():
        dbscan_silhouette = silhouette_score(data_normalized, data_final['DBSCAN_Cluster'])
        st.write(f'DBSCAN Silhouette Score: {dbscan_silhouette}')

         # Allow user to select target variable
    target_variable = st.selectbox("Select target variable for classification", 
                                   ["Cluster", "Agglomerative_Cluster", "DBSCAN_Cluster"])


    # Random Forest Classifier
    X = data_normalized.drop('Cluster', axis=1)
    y = data_normalized['Cluster']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
    rf_classifier.fit(X_train, y_train)
    y_pred = rf_classifier.predict(X_test)

    st.write("Random Forest Classifier Results")
    st.write("Accuracy:", accuracy_score(y_test, y_pred))
    st.write("\nClassification Report:\n", classification_report(y_test, y_pred))
    st.write("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

    importances = rf_classifier.feature_importances_
    feature_names = X.columns
    feature_importances = pd.DataFrame({'Feature': feature_names, 'Importance': importances}).sort_values(by='Importance', ascending=False)

    st.write("Feature Importances")
    plt.figure(figsize=(10, 6))
    sns.barplot(x='Importance', y='Feature', data=feature_importances)
    plt.title('Feature Importances')
    st.pyplot(plt)

    # Display suggestions based on accuracy
    accuracy = accuracy_score(y_test, y_pred)
    if accuracy > 0.8:
        st.write("The model has high accuracy. Consider these suggestions:")
        st.write("- Focus on fine-tuning hyperparameters for further improvement.")
        st.write("- Explore more complex models if necessary.")
    elif accuracy > 0.6:
        st.write("The model has moderate accuracy. Consider these suggestions:")
        st.write("- Investigate feature engineering techniques to improve performance.")
        st.write("- Try different algorithms to see if they yield better results.")
    else:
        st.write("The model has low accuracy. Consider these suggestions:")
        st.write("- Re-evaluate your data preprocessing steps.")
        st.write("- Collect more data if possible.")
        st.write("- Simplify the model to avoid overfitting.")

    # Display cluster profiles and suggestions
    cluster_profiles = data_final.groupby(target_variable).mean()
    for cluster in cluster_profiles.index:
        st.write(f"\nSuggestions for Cluster {cluster}:")
        for column in cluster_profiles.columns:
            value = cluster_profiles.loc[cluster, column]
            overall_mean = cluster_profiles[column].mean()
            if column == 'Birth Rate':
                if value > overall_mean:
                    st.write(f"  - Support family planning services to manage high birth rates.")
                else:
                    st.write(f"  - Encourage family growth through social policies and incentives.")
            elif column == 'Business Tax Rate':
                if value > overall_mean:
                    st.write(f"  - Consider reducing business tax rates to attract and retain businesses.")
                else:
                    st.write(f"  - Maintain competitive business tax rates to support economic growth.")
            elif column == 'CO2 Emissions':
                if value > overall_mean:
                    st.write(f"  - Implement stricter environmental regulations to reduce CO2 emissions.")
                else:
                    st.write(f"  - Promote green technologies to sustain low CO2 emissions.")
            elif column == 'Days to Start Business':
                if value > overall_mean:
                    st.write(f"  - Simplify the process to start a business to reduce the time required.")
                else:
                    st.write(f"  - Maintain efficient business startup processes.")
            elif column == 'Ease of Business':
                if value > overall_mean:
                    st.write(f"  - Enhance the business environment to make it even easier to operate.")
                else:
                    st.write(f"  - Identify and remove barriers to improve the ease of doing business.")
            elif column == 'Energy Usage':
                if value > overall_mean:
                    st.write(f"  - Invest in renewable energy sources to manage high energy usage.")
                else:
                    st.write(f"  - Promote energy efficiency practices to sustain low energy usage.")
            elif column == 'GDP':
                if value > overall_mean:
                    st.write(f"  - Foster economic policies that support sustainable GDP growth.")
                else:
                    st.write(f"  - Implement strategies to stimulate economic growth.")
            elif column == 'Health Exp % GDP':
                if value > overall_mean:
                    st.write(f"  - Ensure efficient allocation of health expenditure to improve outcomes.")
                else:
                    st.write(f"  - Increase health spending to improve public health.")
            elif column == 'Health Exp/Capita':
                if value > overall_mean:
                    st.write(f"  - Optimize health expenditure per capita for better healthcare services.")
                else:
                    st.write(f"  - Allocate more funds to improve healthcare per capita.")
            elif column == 'Hours to do Tax':
                if value > overall_mean:
                    st.write(f"  - Streamline tax processes to reduce the time required for compliance.")
                else:
                    st.write(f"  - Maintain efficient tax compliance procedures.")
            elif column == 'Infant Mortality Rate':
                if value > overall_mean:
                    st.write(f"  - Improve healthcare services to reduce infant mortality rates.")
                else:
                    st.write(f"  - Continue supporting healthcare initiatives to sustain low infant mortality rates.")
            elif column == 'Internet Usage':
                if value > overall_mean:
                    st.write(f"  - Invest in expanding internet access to increase usage.")
                else:
                    st.write(f"  - Promote digital literacy to enhance internet usage.")
            elif column == 'Lending Interest':
                if value > overall_mean:
                    st.write(f"  - Implement policies to reduce lending interest rates and encourage borrowing.")
                else:
                    st.write(f"  - Maintain favorable lending interest rates to support economic activities.")
            elif column == 'Life Expectancy Female':
                if value > overall_mean:
                    st.write(f"  - Continue improving healthcare services for women to sustain high life expectancy.")
                else:
                    st.write(f"  - Invest in women's health initiatives to improve life expectancy.")
            elif column == 'Life Expectancy Male':
                if value > overall_mean:
                    st.write(f"  - Continue improving healthcare services for men to sustain high life expectancy.")
                else:
                    st.write(f"  - Invest in men's health initiatives to improve life expectancy.")
            elif column == 'Mobile Phone Usage':
                if value > overall_mean:
                    st.write(f"  - Promote digital services to capitalize on high mobile phone usage.")
                else:
                    st.write(f"  - Increase access to mobile technology to boost usage.")
            elif column == 'Number of Records':
                if value > overall_mean:
                    st.write(f"  - Maintain accurate records and leverage data for informed decision-making.")
                else:
                    st.write(f"  - Improve data collection and record-keeping practices.")
            elif column == 'Population 0-14':
                if value > overall_mean:
                    st.write(f"  - Invest in education and healthcare for the young population.")
                else:
                    st.write(f"  - Develop policies to encourage population growth in younger age groups.")
            elif column == 'Population 15-64':
                if value > overall_mean:
                    st.write(f"  - Create job opportunities to support the working-age population.")
                else:
                    st.write(f"  - Implement policies to attract and retain the working-age population.")
            elif column == 'Population 65+':
                if value > overall_mean:
                    st.write(f"  - Enhance social security and healthcare services for the elderly.")
                else:
                    st.write(f"  - Prepare for an aging population through sustainable policies.")
            elif column == 'Population Total':
                if value > overall_mean:
                    st.write(f"  - Develop infrastructure and services to support a growing population.")
                else:
                    st.write(f"  - Implement policies to attract and retain residents.")
            elif column == 'Population Urban':
                if value > overall_mean:
                    st.write(f"  - Invest in urban development to support a high urban population.")
                else:
                    st.write(f"  - Promote urbanization to enhance economic growth.")
            elif column == 'Tourism Inbound':
                if value > overall_mean:
                    st.write(f"  - Develop tourism infrastructure to sustain high inbound tourism.")
                else:
                    st.write(f"  - Promote tourism to increase inbound tourist arrivals.")
            elif column == 'Tourism Outbound':
                if value > overall_mean:
                    st.write(f"  - Encourage domestic tourism to balance high outbound tourism.")
                else:
                    st.write(f"  - Support outbound tourism through favorable travel policies.")

else:
    st.write("Please upload an Excel file to begin.")